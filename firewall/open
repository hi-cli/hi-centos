#!/bin/bash
###############################################################################
# Project: hi-cli
# Description: The cross platform development toolkit - hi-cli
# Author: John Deng (john.deng@outlook.com)
#
# Copyright (c) 2014-2017 John Deng (john.deng@outlook.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Author: John Deng (john.deng@outlook.com)
# Updated: Thu Mar 30 17:44:12 CST 2017
# Module: centos
# Submodule: 
# Command: firewall
###############################################################################

source "${HI_CLI_HOME}/bin/colors"
source "${HI_CLI_HOME}/bin/clap"
source "${HI_CLI_HOME}/bin/logging"

###############################################################################
function run()
{
  if [ "$port" == "" ] && [ "$ports" == "" ]; then
    echo please specify port, e.g. 
    echo usage:
    echo $0 port=123
    echo $0 ports='"'11 22 33'"'
    exit 1
  fi

  if [ "${udp}" != "" ];
  then
    protocol=udp
  else
    protocol=tcp
  fi

  if [ "${multiport}" != "" ];
  then
    iptables -A INPUT -p ${protocol} --match multiport --dports ${port} -j ACCEPT
    iptables -A OUTPUT -p ${protocol} --match multiport --dports ${port} -j ACCEPT
  else

    iptables -A INPUT -p ${protocol} --dport ${port} -j ACCEPT
    iptables -A OUTPUT -p ${protocol} --dport ${port} -j ACCEPT
  fi

  systemctl unmask firewalld
  systemctl start firewalld
  systemctl enable firewalld
  
  if [ "${port}" != "" ]; then
    if [ "${ssh}" != "" ]; then
      semanage port -a -t ssh_port_t -p ${protocol} ${port}
    fi
    firewall-cmd --zone=public --add-port=${port}/${protocol} --permanent
    cli="open firewall port: ${port}"
  elif [ "${ports}" != "" ]; then
    cli="open firewall port: ${ports}"
    arr=($ports)
    for i in "${arr[@]}"
    do
      log_info open port $i
      firewall-cmd --zone=public --add-port=$i/${protocol} --permanent
    done
  else
    exit 1  
  fi
  
  firewall-cmd --reload
  result=$?

  eval $1="\${result}"
  eval $2="\${cli}"
}

